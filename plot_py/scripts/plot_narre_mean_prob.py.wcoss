import pygrib
import matplotlib
matplotlib.use('Agg')
import io
import matplotlib.pyplot as plt
import matplotlib.image as image
from matplotlib.gridspec import GridSpec
import mpl_toolkits
mpl_toolkits.__path__.append('/gpfs/dell2/emc/modeling/noscrub/gwv/py/lib/python/basemap-1.2.1-py3.6-linux-x86_64.egg/mpl_toolkits/')
from mpl_toolkits.basemap import Basemap, maskoceans
import numpy as np
import time,os,sys,multiprocessing
import multiprocessing.pool
import ncepy
from scipy import ndimage
from netCDF4 import Dataset
import pyproj

#--------------Set some classes------------------------#
# Make Python process pools non-daemonic
class NoDaemonProcess(multiprocessing.Process):
  # make 'daemon' attribute always return False
  def _get_daemon(self):
    return False
  def _set_daemon(self, value):
    pass
  daemon = property(_get_daemon, _set_daemon)

# We sub-class multiprocessing.pool.Pool instead of multiprocessing.Pool
# because the latter is only a wrapper function, not a proper class.
class MyPool(multiprocessing.pool.Pool):
  Process = NoDaemonProcess


#--------------Define some functions ------------------#

def clear_plotables(ax,keep_ax_lst,fig):
  #### - step to clear off old plottables but leave the map info - ####
  if len(keep_ax_lst) == 0 :
    print("clear_plotables WARNING keep_ax_lst has length 0. Clearing ALL plottables including map info!")
  cur_ax_children = ax.get_children()[:]
  if len(cur_ax_children) > 0:
    for a in cur_ax_children:
      if a not in keep_ax_lst:
       # if the artist isn't part of the initial set up, remove it
        a.remove()

def compress_and_save(filename):
  #### - compress and save the image - ####
#  ram = io.StringIO()
#  ram = io.BytesIO()
#  plt.savefig(ram, format='png', bbox_inches='tight', dpi=150)
  plt.savefig(filename, format='png', bbox_inches='tight', dpi=300)
#  ram.seek(0)
#  im = Image.open(ram)
#  im2 = im.convert('RGB').convert('P', palette=Image.ADAPTIVE)
#  im2.save(filename, format='PNG')

def extrema(mat,mode='wrap',window=100):
    # find the indices of local extrema (max only) in the input array.
    mx = ndimage.filters.maximum_filter(mat,size=window,mode=mode)
    # (mat == mx) true if pixel is equal to the local max
    return np.nonzero(mat == mx)

#-------------------------------------------------------#

# Necessary to generate figs when not running an Xserver (e.g. via PBS)
# plt.switch_backend('agg')

# Read date/time and forecast hour from command line
ymdh = str(sys.argv[1])
ymd = ymdh[0:8]
year = int(ymdh[0:4])
month = int(ymdh[4:6])
day = int(ymdh[6:8])
hour = int(ymdh[8:10])
cyc = str(hour).zfill(2)
print(year, month, day, hour)

fhr = int(sys.argv[2])
fhrm1 = fhr - 1
fhrm2 = fhr - 2
fhrm6 = fhr - 6
fhrm24 = fhr - 24
fhour = str(fhr).zfill(2)
fhour1 = str(fhrm1).zfill(2)
fhour2 = str(fhrm2).zfill(2)
fhour6 = str(fhrm6).zfill(2)
fhour24 = str(fhrm24).zfill(2)
print('fhour '+fhour)

# Define the input files
#data1 = pygrib.open('/gpfs/dell4/ptmp/emc.campara/fv3lam/fv3lam.'+cyc+'/fv3lam.t'+cyc+'z.conus.f0'+fhour+'.grib2')
data1 = pygrib.open('/gpfs/dell1/ptmp/Binbin.Zhou/narre/plot_py/'+str(ymdh)+'/narre.t'+cyc+'z.mean_c3.grd130.f'+fhour+'.grib2')
data2 = pygrib.open('/gpfs/dell1/ptmp/Binbin.Zhou/narre/plot_py/'+str(ymdh)+'/narre.t'+cyc+'z.prob_c3.grd130.f'+fhour+'.grib2')

# Get the lats and lons
# Get the lats and lons
grids = [data1, data2]
lats = []
lons = []
lats_shift = []
lons_shift = []


for data in grids:
    # Unshifted grid for contours and wind barbs
    lat, lon = data[1].latlons()
    lats.append(lat)
    lons.append(lon)

    # Shift grid for pcolormesh
    lat1 = data[1]['latitudeOfFirstGridPointInDegrees']
    lon1 = data[1]['longitudeOfFirstGridPointInDegrees']
    try:
        nx = data[1]['Nx']
        ny = data[1]['Ny']
    except:
        nx = data[1]['Ni']
        ny = data[1]['Nj']
    dx = data[1]['DxInMetres']
    dy = data[1]['DyInMetres']
    pj = pyproj.Proj(data[1].projparams)
    llcrnrx, llcrnry = pj(lon1,lat1)
    llcrnrx = llcrnrx - (dx/2.)
    llcrnry = llcrnry - (dy/2.)
    x = llcrnrx + dx*np.arange(nx)
    y = llcrnry + dy*np.arange(ny)
    x,y = np.meshgrid(x,y)
    lon, lat = pj(x, y, inverse=True)
    lats_shift.append(lat)
    lons_shift.append(lon)


# Unshifted lat/lon arrays grabbed directly using latlons() method
lat = lats[0]
lon = lons[0]
lat2 = lats[1]
lon2 = lons[1]


# Shifted lat/lon arrays for pcolormesh
lat_shift = lats_shift[0]
lon_shift = lons_shift[0]
lat2_shift = lats_shift[1]
lon2_shift = lons_shift[1]

Lat0 = data1[1]['LaDInDegrees']
Lon0 = data1[1]['LoVInDegrees']

print(Lat0)
print(Lon0)

# Forecast valid date/time
itime = ymdh
vtime = ncepy.ndate(itime,int(fhr))

# Specify plotting domains
#domains = ['conus','BN','CE','CO','LA','MA','NC','NE','NW','OV','SC','SE','SF','SP','SW','UM']
#domains=['us']
domains=['us','ne','se','mw','ms','nw','sw','zny','zdc','zhu','zau','zoa','sco']

###################################################
# Read in all variables and calculate differences #
###################################################
#t1a = time.clock()


# 2-m temperature
#tmp2m_1 = data1.select(name='2 metre temperature')[0].values
#tmp2m_1 = (tmp2m_1 - 273.15)*1.8 + 32.0

ceiling = data1.select(name='Geopotential Height',nameOfFirstFixedSurface='215')[0].values * 3.28084
visibility = data1.select(name='Visibility')[0].values
frzhgt = data1.select(name='Geopotential Height',nameOfFirstFixedSurface='Level of 0o C isotherm')[0].values * 3.28084 
windshear = data1.select(name='Vertical speed shear')[0].values

ceiling_1000 = data2.select(name='Geopotential Height', typeOfFirstFixedSurface='215', lowerLimit=305.0)[0].values
ceiling_2000 = data2.select(name='Geopotential Height', typeOfFirstFixedSurface='215', lowerLimit=610.0)[0].values
ceiling_3000 = data2.select(name='Geopotential Height', typeOfFirstFixedSurface='215', lowerLimit=915.0)[0].values
ceiling_6000 = data2.select(name='Geopotential Height', typeOfFirstFixedSurface='215', lowerLimit=1830.0)[0].values
ceiling_10000 = data2.select(name='Geopotential Height', typeOfFirstFixedSurface='215', lowerLimit=3050.0)[0].values

visibility_400 = data2.select(name='Visibility', lowerLimit=400.0)[0].values
visibility_800 = data2.select(name='Visibility', lowerLimit=800.0)[0].values
visibility_1600 = data2.select(name='Visibility', lowerLimit=1600.0)[0].values
visibility_3200 = data2.select(name='Visibility', lowerLimit=3200.0)[0].values
visibility_6400 = data2.select(name='Visibility', lowerLimit=6400.0)[0].values

LIFR = data2.select(parameterCategory=19,parameterNumber=205,lowerLimit=1.0)[0].values
IFR =  data2.select(parameterCategory=19,parameterNumber=205,lowerLimit=2.0)[0].values
MVFR = data2.select(parameterCategory=19,parameterNumber=205,lowerLimit=3.0)[0].values
VFR =  data2.select(parameterCategory=19,parameterNumber=205,lowerLimit=4.0)[0].values

fog_light = data2.select(parameterCategory=6,parameterNumber=193,upperLimit=0.016)[0].values
fog_med   = data2.select(parameterCategory=6,parameterNumber=193,upperLimit=0.036)[0].values
fog_dense = data2.select(parameterCategory=6,parameterNumber=193,upperLimit=0.10300000000000001)[0].values

reflect_10 = data2.select(parameterCategory=16,parameterNumber=196,upperLimit=10.0)[0].values
reflect_20 = data2.select(parameterCategory=16,parameterNumber=196,upperLimit=20.0)[0].values
reflect_30 = data2.select(parameterCategory=16,parameterNumber=196,upperLimit=30.0)[0].values
reflect_40 = data2.select(parameterCategory=16,parameterNumber=196,upperLimit=40.0)[0].values
reflect_50 = data2.select(parameterCategory=16,parameterNumber=196,upperLimit=50.0)[0].values

llws_20 = data2.select(parameterCategory=2,parameterNumber=192,upperLimit=20.0)[0].values

wind10m_20 = data2.select(parameterCategory=2,parameterNumber=1,level=10,upperLimit=10.3)[0].values
wind10m_40 = data2.select(parameterCategory=2,parameterNumber=1,level=10,upperLimit=20.6)[0].values
wind10m_60 = data2.select(parameterCategory=2,parameterNumber=1,level=10,upperLimit=30.9)[0].values

wind4500ft_20 = data2.select(parameterCategory=2,parameterNumber=1,level=850,upperLimit=10.3)[0].values
wind4500ft_40 = data2.select(parameterCategory=2,parameterNumber=1,level=850,upperLimit=20.6)[0].values
wind4500ft_60 = data2.select(parameterCategory=2,parameterNumber=1,level=850,upperLimit=30.9)[0].values
 
wind15000ft_60 = data2.select(parameterCategory=2,parameterNumber=1,level=550,upperLimit=30.9)[0].values
wind15000ft_80 = data2.select(parameterCategory=2,parameterNumber=1,level=550,upperLimit=41.2)[0].values
wind15000ft_100 = data2.select(parameterCategory=2,parameterNumber=1,level=550,upperLimit=51.5)[0].values

wind35000ft_60 = data2.select(parameterCategory=2,parameterNumber=1,level=250,upperLimit=30.9)[0].values
wind35000ft_80 = data2.select(parameterCategory=2,parameterNumber=1,level=250,upperLimit=41.2)[0].values
wind35000ft_100 = data2.select(parameterCategory=2,parameterNumber=1,level=250,upperLimit=51.5)[0].values

convection = data2.select(parameterCategory=1,parameterNumber=196,level=1)[0].values

type_rain =  data2.select(parameterCategory=1,parameterNumber=192,level=0,lowerLimit=1.0)[0].values 
type_snow =  data2.select(parameterCategory=1,parameterNumber=195,level=0,lowerLimit=1.0)[0].values 
type_frzr =  data2.select(parameterCategory=1,parameterNumber=193,level=0,lowerLimit=1.0)[0].values 

if fhr >= 3: 
  apcp3h_0p01 = data2.select(parameterCategory=1,parameterNumber=8,upperLimit=0.24899999999999997)[0].values
  apcp3h_0p10 = data2.select(parameterCategory=1,parameterNumber=8,upperLimit=2.5)[0].values
  apcp3h_0p25 = data2.select(parameterCategory=1,parameterNumber=8,upperLimit=6.35)[0].values
  apcp3h_0p50 = data2.select(parameterCategory=1,parameterNumber=8,upperLimit=12.7)[0].values

if fhr >= 6:
  apcp6h_0p01 = data2.select(parameterCategory=1,parameterNumber=8,upperLimit=0.25)[0].values
  apcp6h_0p25 = data2.select(parameterCategory=1,parameterNumber=8,upperLimit=6.351000000000001)[0].values
  apcp6h_0p50 = data2.select(parameterCategory=1,parameterNumber=8,upperLimit=12.709999999999999)[0].values


icing_FL000 = data2.select(parameterCategory=19,parameterNumber=7,level=1000)[0].values
icing_FL030 = data2.select(parameterCategory=19,parameterNumber=7,level=900)[0].values
icing_FL060 = data2.select(parameterCategory=19,parameterNumber=7,level=800)[0].values
icing_FL090 = data2.select(parameterCategory=19,parameterNumber=7,level=725)[0].values
icing_FL120 = data2.select(parameterCategory=19,parameterNumber=7,level=650)[0].values
icing_FL150 = data2.select(parameterCategory=19,parameterNumber=7,level=575)[0].values
icing_FL180 = data2.select(parameterCategory=19,parameterNumber=7,level=500)[0].values
icing_FL240 = data2.select(parameterCategory=19,parameterNumber=7,level=400)[0].values

cat_light_FL180 =  data2.select(parameterCategory=19,parameterNumber=22,level=525,lowerLimit=1.0)[0].values
cat_med_FL180 =    data2.select(parameterCategory=19,parameterNumber=22,level=525,lowerLimit=2.0)[0].values
cat_severe_FL180 = data2.select(parameterCategory=19,parameterNumber=22,level=525,lowerLimit=3.0)[0].values

cat_light_FL210 =  data2.select(parameterCategory=19,parameterNumber=22,level=450,lowerLimit=1.0)[0].values
cat_med_FL210 =    data2.select(parameterCategory=19,parameterNumber=22,level=450,lowerLimit=2.0)[0].values
cat_severe_FL210 = data2.select(parameterCategory=19,parameterNumber=22,level=450,lowerLimit=3.0)[0].values

cat_light_FL240 =  data2.select(parameterCategory=19,parameterNumber=22,level=425,lowerLimit=1.0)[0].values
cat_med_FL240 =    data2.select(parameterCategory=19,parameterNumber=22,level=425,lowerLimit=2.0)[0].values
cat_severe_FL240 = data2.select(parameterCategory=19,parameterNumber=22,level=425,lowerLimit=3.0)[0].values

cat_light_FL270 =  data2.select(parameterCategory=19,parameterNumber=22,level=350,lowerLimit=1.0)[0].values
cat_med_FL270 =    data2.select(parameterCategory=19,parameterNumber=22,level=350,lowerLimit=2.0)[0].values
cat_severe_FL270 = data2.select(parameterCategory=19,parameterNumber=22,level=350,lowerLimit=3.0)[0].values

cat_light_FL300 =  data2.select(parameterCategory=19,parameterNumber=22,level=300,lowerLimit=1.0)[0].values
cat_med_FL300 =    data2.select(parameterCategory=19,parameterNumber=22,level=300,lowerLimit=2.0)[0].values
cat_severe_FL300 = data2.select(parameterCategory=19,parameterNumber=22,level=300,lowerLimit=3.0)[0].values

cat_light_FL330 =  data2.select(parameterCategory=19,parameterNumber=22,level=275,lowerLimit=1.0)[0].values
cat_med_FL330 =    data2.select(parameterCategory=19,parameterNumber=22,level=275,lowerLimit=2.0)[0].values
cat_severe_FL330 = data2.select(parameterCategory=19,parameterNumber=22,level=275,lowerLimit=3.0)[0].values

cat_light_FL360 =  data2.select(parameterCategory=19,parameterNumber=22,level=225,lowerLimit=1.0)[0].values
cat_med_FL360 =    data2.select(parameterCategory=19,parameterNumber=22,level=225,lowerLimit=2.0)[0].values
cat_severe_FL360 = data2.select(parameterCategory=19,parameterNumber=22,level=225,lowerLimit=3.0)[0].values

cat_light_FL390 =  data2.select(parameterCategory=19,parameterNumber=22,level=200,lowerLimit=1.0)[0].values
cat_med_FL390 =    data2.select(parameterCategory=19,parameterNumber=22,level=200,lowerLimit=2.0)[0].values
cat_severe_FL390 = data2.select(parameterCategory=19,parameterNumber=22,level=200,lowerLimit=3.0)[0].values

cat_light_FL420 =  data2.select(parameterCategory=19,parameterNumber=22,level=175,lowerLimit=1.0)[0].values
cat_med_FL420 =    data2.select(parameterCategory=19,parameterNumber=22,level=175,lowerLimit=2.0)[0].values
cat_severe_FL420 = data2.select(parameterCategory=19,parameterNumber=22,level=175,lowerLimit=3.0)[0].values




# colors for difference plots, only need to define once
####difcolors = ['blue','#1874CD','dodgerblue','deepskyblue','turquoise','white','white','#EEEE00','#EEC900','darkorange','orangered','red']

########################################
#    START PLOTTING FOR EACH DOMAIN    #
########################################

def main():

  # Number of processes must coincide with the number of domains to plot
  pool = MyPool(len(domains))
  pool.map(plot_all,domains)

def plot_all(domain):

  global dom
  dom = domain
  print(('Working on '+dom))

  global fig,axes,ax1,ax2,keep_ax_lst_1,keep_ax_lst_2,m,x,y,x2,y2,x_shift,y_shift,x2_shift,y2_shift,xscale,yscale,im,par
  fig,axes,ax1,ax2,keep_ax_lst_1,keep_ax_lst_2,m,x,y,x2,y2,x_shift,y_shift,x2_shift,y2_shift,xscale,yscale,im,par = create_figure()
  # Split plots into 2 sets with multiprocessing
  sets = [1,2]
  pool2 = multiprocessing.Pool(len(sets))
  pool2.map(plot_sets,sets)

def create_figure():

  # create figure and axes instances
  fig = plt.figure()
  gs = GridSpec(4,4,wspace=0.0,hspace=0.0)
  ax1 = fig.add_subplot(gs[:,:])
  ax2 = fig.add_subplot(gs[:,:])
  axes = [ax1,ax2]
  im = image.imread('/gpfs/dell2/emc/modeling/noscrub/Benjamin.Blake/python.fv3/noaa.png')
  par = 1

  # Map corners for each domain
  if dom == 'us':
    llcrnrlon = -130.0
    llcrnrlat = 20.0 
    urcrnrlon = -62.0
    urcrnrlat = 50.0
    lat_0 = 35.4
    lon_0 = -97.6
    xscale=0.15
    yscale=0.2
  elif dom == 'ne':
    llcrnrlon = -86.0
    llcrnrlat = 36.0
    urcrnrlon = -62.0
    urcrnrlat = 50.0
    lat_0 = 41.0
    lon_0 = -74.6
    xscale=0.14
    yscale=0.15
  elif dom == 'se':
    llcrnrlon = -95.0
    llcrnrlat = 22.0
    urcrnrlon = -70
    urcrnrlat = 40.0
    lat_0 = 30.0
    lon_0 = -80.0
    xscale=0.14
    yscale=0.15
  elif dom == 'mw':
    llcrnrlon = -105.0
    llcrnrlat = 36.0
    urcrnrlon = -83.0
    urcrnrlat = 50.0
    lat_0 = 42.0
    lon_0 = -93.0
    xscale=0.14
    yscale=0.15
  elif dom == 'ms':
    llcrnrlon = -107.0
    llcrnrlat = 25.0
    urcrnrlon = -85.0
    urcrnrlat = 40.0
    lat_0 = 33.0
    lon_0 = -95.0
    xscale=0.14
    yscale=0.15
  elif dom == 'nw':
    llcrnrlon = -130.0
    llcrnrlat = 38.0
    urcrnrlon = -105.5
    urcrnrlat = 50.0
    lat_0 = 44.0
    lon_0 = -115.0
    xscale=0.16
    yscale=0.18
  elif dom == 'sw':
    llcrnrlon = -130.0
    llcrnrlat = 30.0
    urcrnrlon = -105.0
    urcrnrlat = 42.0
    lat_0 = 36.0
    lon_0 = -115.0
    xscale=0.16
    yscale=0.18
  elif dom == 'zny':
    llcrnrlon = -82.0     
    llcrnrlat = 38.5
    urcrnrlon = -71.0
    urcrnrlat = 43.5
    lat_0 = 41.0
    lon_0 = -77.0
    xscale=0.16
    yscale=0.18
  elif dom == 'zdc':
    llcrnrlon = -83.0     
    llcrnrlat = 33.0
    urcrnrlon = -70.0
    urcrnrlat = 41.0
    lat_0 = 37.0
    lon_0 = -77.0
    xscale=0.15
    yscale=0.16
  elif dom == 'zhu':
    llcrnrlon = -105.0 
    llcrnrlat = 25.0
    urcrnrlon = -83.0
    urcrnrlat = 36.0
    lat_0 = 30.0
    lon_0 = -94.0          
    xscale=0.16
    yscale=0.17
  elif dom == 'zau':
    llcrnrlon = -94.0 
    llcrnrlat = 40.0
    urcrnrlon = -85.0
    urcrnrlat = 45.0
    lat_0 = 43.0
    lon_0 = -90.0      
    xscale=0.14
    yscale=0.15
  elif dom == 'zoa':
    llcrnrlon = -130.0 
    llcrnrlat = 35.0
    urcrnrlon = -115.0
    urcrnrlat = 41.0
    lat_0 = 37.0
    lon_0 = -125.0
    xscale=0.17
    yscale=0.18
  elif dom == 'sco':
    llcrnrlon = -111.0 
    llcrnrlat = 36.5
    urcrnrlon = -100.0
    urcrnrlat = 42.0
    lat_0 = 38.0
    lon_0 = -106.0
    xscale=0.16
    yscale=0.17

  # Create basemap instance and set the dimensions
  for ax in axes:
    if dom == 'BN' or dom == 'LA' or dom == 'SF' or dom == 'SP':
      m = Basemap(ax=ax,projection='gnom',lat_0=lat_0,lon_0=lon_0,\
                  llcrnrlat=llcrnrlat, urcrnrlat=urcrnrlat,\
                  llcrnrlon=llcrnrlon, urcrnrlon=urcrnrlon,\
                  resolution='h')
    elif dom == 'us':
      m = Basemap(ax=ax,projection='cyl',lat_0=lat_0,lon_0=lon_0,\
                  llcrnrlat=llcrnrlat, urcrnrlat=urcrnrlat,\
                  llcrnrlon=llcrnrlon, urcrnrlon=urcrnrlon,\
                  resolution='l')
    else:
      m = Basemap(ax=ax,projection='cyl',lat_0=lat_0,lon_0=lon_0,\
                  llcrnrlat=llcrnrlat, urcrnrlat=urcrnrlat,\
                  llcrnrlon=llcrnrlon, urcrnrlon=urcrnrlon,\
                  resolution='l')
    m.fillcontinents(color='LightGrey',zorder=0)
    m.drawcoastlines(linewidth=0.75)
    m.drawstates(linewidth=0.5)
    m.drawcountries(linewidth=0.5)

    x,y = m(lon,lat)
    x2,y2 = m(lon2,lat2)

    x_shift,y_shift   = m(lon_shift,lat_shift)
    x2_shift,y2_shift = m(lon2_shift,lat2_shift)

 
  # Map/figure has been set up here, save axes instances for use again later
    if par == 1:
      keep_ax_lst_1 = ax.get_children()[:]
    elif par == 2:
      keep_ax_lst_2 = ax.get_children()[:]

    par += 1
  par = 1

  return fig,axes,ax1,ax2,keep_ax_lst_1,keep_ax_lst_2,m,x,y,x2,y2,x_shift,y_shift,x2_shift,y2_shift,xscale,yscale,im,par

def plot_sets(set):
# Add print to see if dom is being passed in
  print(('plot_sets dom variable '+dom))

  global fig,axes,ax1,ax2,ax3,keep_ax_lst_1,keep_ax_lst_2,keep_ax_lst_3,m,x,y,x2,y2,x_shift,y_shift,x2_shift,y2_shift,xscale,yscale,im,par

  if set == 1:
    plot_set_1()
  elif set == 2:
    plot_set_2()

def plot_set_1():
  global fig,axes,ax1,ax2,keep_ax_lst_1,keep_ax_lst_2,m,x,y,x2,y2,x_shift,y_shift,x2_shift,y2_shift,xscale,yscale,im,par

#################################
  # Plot Ceiling
#################################

  print(('Working on ceiling for '+dom))

  units = 'feet AGL'
  clevs = [0,1000,3000,6000,10000,15000,20000,25000]
  colorlist = ['deeppink','orange','yellow','lawngreen','cyan','blue','darkmagenta']
  cm = matplotlib.colors.ListedColormap(colorlist)
  norm = matplotlib.colors.BoundaryNorm(clevs, cm.N)

  for ax in axes:
    xmin, xmax = ax.get_xlim()
    ymin, ymax = ax.get_ylim()
    xmax = int(round(xmax))
    ymax = int(round(ymax))

    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,ceiling,cmap=cm,norm=norm,ax=ax)
      cs_1.cmap.set_under('white')
      cs_1.cmap.set_over('white')
      cbar1 = m.colorbar(cs_1,ax=ax,location='bottom',pad=0.05,ticks=clevs,extend='max')
      cbar1.set_label(units,fontsize=6)
      cbar1.ax.tick_params(labelsize=5)
      ax.text(.5,1.03,'NARRE Ceiling Mean ('+units+') \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      ax.imshow(im,aspect='equal',alpha=0.5,origin='upper',extent=(0,int(round(xmax*xscale)),0,int(round(ymax*yscale))),zorder=4)

    par += 1
  par = 1

  compress_and_save('./'+dom+'/ceiling.t'+cyc+'z.'+fhour+'.png')


#################################
  # Plot Visibility
#################################

  print(('Working on Visibility for '+dom))

  cbar1.remove()
  clear_plotables(ax1,keep_ax_lst_1,fig)

  units = 'm'
  clevs = [200,500,1000,2000,4000,6000,10000]
  colorlist = ['deeppink','orange','yellow','lawngreen','cyan','blue','darkmagenta']
  cm = matplotlib.colors.ListedColormap(colorlist)
  norm = matplotlib.colors.BoundaryNorm(clevs, cm.N)
  
  for ax in axes:
    xmin, xmax = ax.get_xlim()
    ymin, ymax = ax.get_ylim()
    xmax = int(round(xmax))
    ymax = int(round(ymax))

    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,visibility,cmap=cm,norm=norm,ax=ax)
      cs_1.cmap.set_under('white')
      cs_1.cmap.set_over('white')
      cbar1 = m.colorbar(cs_1,ax=ax,location='bottom',pad=0.05,ticks=clevs,extend='max')
      cbar1.set_label(units,fontsize=6)
      cbar1.ax.tick_params(labelsize=5)
      ax.text(.5,1.03,'NARRE Visibility Mean ('+units+') \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      ax.imshow(im,aspect='equal',alpha=0.5,origin='upper',extent=(0,int(round(xmax*xscale)),0,int(round(ymax*yscale))),zorder=4)

    par += 1
  par = 1

  compress_and_save('./'+dom+'/vis.t'+cyc+'z.'+fhour+'.png')


######################################
#   Plot Wind Shear
#################################

  print(('Working on Wind Shear for '+dom))

  cbar1.remove()
  clear_plotables(ax1,keep_ax_lst_1,fig)

  units = 'knots/2000 feet'
  clevs = [5,10,15,20,25,30,35]
  colorlist = ['deeppink','orange','yellow','lawngreen','cyan','blue','darkmagenta']
  cm = matplotlib.colors.ListedColormap(colorlist)
  norm = matplotlib.colors.BoundaryNorm(clevs, cm.N)

  for ax in axes:
    xmin, xmax = ax.get_xlim()
    ymin, ymax = ax.get_ylim()
    xmax = int(round(xmax))
    ymax = int(round(ymax))

    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,windshear,cmap=cm,norm=norm,ax=ax)
      cs_1.cmap.set_under('white')
      cs_1.cmap.set_over('white')
      cbar1 = m.colorbar(cs_1,ax=ax,location='bottom',pad=0.05,ticks=clevs,extend='max')
      cbar1.set_label(units,fontsize=6)
      cbar1.ax.tick_params(labelsize=5)
      ax.text(.5,1.03,'NARRE Low Level Wind Shear Mean ('+units+') \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      ax.imshow(im,aspect='equal',alpha=0.5,origin='upper',extent=(0,int(round(xmax*xscale)),0,int(round(ymax*yscale))),zorder=4)

    par += 1
  par = 1

  compress_and_save('./'+dom+'/llws.t'+cyc+'z.'+fhour+'.png')


######################################
#   Plot Freezing height 
#################################

  print(('Working on Freezing height for '+dom))

  cbar1.remove()
  clear_plotables(ax1,keep_ax_lst_1,fig)

  units = 'feet'
  clevs = [0,1500,3000,6000,9000,12000,15000]
  colorlist = ['deeppink','orange','yellow','lawngreen','cyan','blue','darkmagenta']
  cm = matplotlib.colors.ListedColormap(colorlist)
  norm = matplotlib.colors.BoundaryNorm(clevs, cm.N)

  for ax in axes:
    xmin, xmax = ax.get_xlim()
    ymin, ymax = ax.get_ylim()
    xmax = int(round(xmax))
    ymax = int(round(ymax))

    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,frzhgt,cmap=cm,norm=norm,ax=ax)
      cs_1.cmap.set_under('white')
      cs_1.cmap.set_over('white')
      cbar1 = m.colorbar(cs_1,ax=ax,location='bottom',pad=0.05,ticks=clevs,extend='max')
      cbar1.set_label(units,fontsize=6)
      cbar1.ax.tick_params(labelsize=5)
      ax.text(.5,1.03,'NARRE Freezing Height Mean ('+units+') \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      ax.imshow(im,aspect='equal',alpha=0.5,origin='upper',extent=(0,int(round(xmax*xscale)),0,int(round(ymax*yscale))),zorder=4)

    par += 1
  par = 1

  compress_and_save('./'+dom+'/frzh.t'+cyc+'z.'+fhour+'.png')

#####################################
  plt.clf()
#####################################


def plot_set_2():
  global fig,axes,ax1,ax2,keep_ax_lst_1,keep_ax_lst_2,m,x,y,x2,y2,x_shift,y_shift,x2_shift,y2_shift,xscale,yscale,im,par

#################################
  # Plot Ceiling Probability
#################################

  units = ''
  clevs = [0,10,20,30,40,50,60,70,80,90,100]
  colorlist = ['white','purple','blue','deepskyblue','cyan','yellowgreen','yellow','orange','orangered','deeppink','red']
  cm = matplotlib.colors.ListedColormap(colorlist)
  norm = matplotlib.colors.BoundaryNorm(clevs, cm.N)


  # ceiling <1000
  print(('Working on ceiling < 1000 feet prob for '+dom))

  for ax in axes:
    xmin, xmax = ax.get_xlim()
    ymin, ymax = ax.get_ylim()
    xmax = int(round(xmax))
    ymax = int(round(ymax))

    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,ceiling_1000,cmap=cm,norm=norm,ax=ax)
      cbar1 = m.colorbar(cs_1,ax=ax,location='bottom',pad=0.05,ticks=clevs,extend='max')
      cbar1.set_label(units,fontsize=6)
      cbar1.ax.tick_params(labelsize=5)
      ax.text(.5,1.03,'NARRE Probability of Ceiling < 1000 feet \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      ax.imshow(im,aspect='equal',alpha=0.5,origin='upper',extent=(0,int(round(xmax*xscale)),0,int(round(ymax*yscale))),zorder=4)

    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_ceiling.lt.1000feet.t'+cyc+'z.'+fhour+'.png')

  # ceiling < 2000
  print(('Working on ceiling < 2000 feet prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,ceiling_2000,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Ceiling < 2000 feet \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_ceiling.lt.2000feet.t'+cyc+'z.'+fhour+'.png')

  # ceiling < 3000
  print(('Working on ceiling < 3000 feet prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,ceiling_3000,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Ceiling < 3000 feet \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_ceiling.lt.3000feet.t'+cyc+'z.'+fhour+'.png')

  # ceiling < 6000
  print(('Working on ceiling < 6000 feet prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,ceiling_6000,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Ceiling < 6000 feet \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_ceiling.lt.6000feet.t'+cyc+'z.'+fhour+'.png')

  # ceiling < 10000
  print(('Working on ceiling < 10000 feet prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,ceiling_10000,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Ceiling < 10000 feet \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_ceiling.lt.10000feet.t'+cyc+'z.'+fhour+'.png')

#################################
  # Plot Visibility Probability
#################################

  # Visibility < 400m
  print(('Working on visibility < 400 m prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,visibility_400,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Visibility < 1/4 Mile \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_vis.lt.400m.t'+cyc+'z.'+fhour+'.png')

  # Visibility < 800m
  print(('Working on visibility < 800 m prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,visibility_800,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Visibility < 1/2 Mile \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_vis.lt.800m.t'+cyc+'z.'+fhour+'.png')

  # Visibility < 1600m
  print(('Working on visibility < 1600 m prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,visibility_1600,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Visibility < 1 Mile \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_vis.lt.1600m.t'+cyc+'z.'+fhour+'.png')

  # Visibility < 3200m
  print(('Working on visibility < 3200 m prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,visibility_3200,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Visibility < 2 Miles \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_vis.lt.3200m.t'+cyc+'z.'+fhour+'.png')

  # Visibility < 6400m
  print(('Working on visibility < 6400 m prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,visibility_6400,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Visibility < 4 Miles \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_vis.lt.6400m.t'+cyc+'z.'+fhour+'.png')

#############################################
  # Plot Flight Restriction Probability
############################################

  # LIFR 
  print(('Working on LIFR prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,LIFR,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of LIFR \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_LIFR.t'+cyc+'z.'+fhour+'.png')

  # IFR
  print(('Working on IFR prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,IFR,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of IFR \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_IFR.t'+cyc+'z.'+fhour+'.png')

  # MVFR
  print(('Working on MVFR prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,MVFR,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of MVFR \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_MVFR.t'+cyc+'z.'+fhour+'.png')

  # VFR
  print(('Working on VFR prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,VFR,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of VFR \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_VFR.t'+cyc+'z.'+fhour+'.png')


#############################################
  # Plot Fog Probability
############################################

  # Light Fog
  print(('Working on fog prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,fog_light,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Fog \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_fog.light.t'+cyc+'z.'+fhour+'.png')


  # Dense Fog
  print(('Working on light fog prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,fog_dense,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Dense Fog \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_fog.dense.t'+cyc+'z.'+fhour+'.png')


#############################################
  # Plot 10m Wind/Wind shear Probability
############################################

  # Wind shear
  print(('Working on wind shear  prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,llws_20,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Low level Wind Shear > 20knots \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_llws.gt.20knt.t'+cyc+'z.'+fhour+'.png')

  # 10m wind speed > 20knt
  print(('Working on 10m wind speed > 20knt  prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,wind10m_20,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of 10m Wind Speed > 20 knots      \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_jet10.gt.20knt.t'+cyc+'z.'+fhour+'.png')

  # 10m wind speed > 40knt
  print(('Working on 10m wind speed > 40knt  prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,wind10m_40,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of 10m Wind Speed > 40 knots \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_jet10.gt.40knt.t'+cyc+'z.'+fhour+'.png')

  # 10m wind speed > 60knt
  print(('Working on 10m wind speed > 60knt  prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,wind10m_60,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of 10m Wind Speed > 60 knots           \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_jet10.gt.60knt.t'+cyc+'z.'+fhour+'.png')


#############################################
  # Plot Upper Jet stream Probability
############################################

  # 4500feet: Wind speed > 20knots 
  print(('Working on Wind speed > 20knots at 4500 feet  prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,wind4500ft_20,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Jet Stream > 20knots at 4500 feet   \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_jet4500.gt.20knt.t'+cyc+'z.'+fhour+'.png')

  # 4500feet: Wind speed > 40knots
  print(('Working on Wind speed > 40knots at 4500 feet  prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,wind4500ft_40,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Jet Stream > 20knots at 4500 feet   \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_jet4500.gt.40knt.t'+cyc+'z.'+fhour+'.png')

  # 4500feet: Wind speed > 60knots
  print(('Working on Wind speed > 60knots at 4500 feet  prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,wind4500ft_60,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Jet Stream > 60knots at 4500 feet   \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_jet4500.gt.60knt.t'+cyc+'z.'+fhour+'.png')


  # 15000feet: Wind speed > 60knots
  print(('Working on Wind speed > 60knots at 15000 feet  prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,wind15000ft_60,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Jet Stream > 60knots at 15000 feet    \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_jet15000.gt.60knt.t'+cyc+'z.'+fhour+'.png')


  # 15000feet: Wind speed > 80knots
  print(('Working on Wind speed > 80knots at 15000 feet  prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,wind15000ft_80,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Jet Stream > 80knots at 15000 feet   \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_jet15000.gt.80knt.t'+cyc+'z.'+fhour+'.png')

  # 15000feet: Wind speed > 100knots
  print(('Working on Wind speed > 100knots at 15000 feet  prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,wind15000ft_100,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Jet Stream > 100knots at 15000 feet   \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_jet15000.gt.100knt.t'+cyc+'z.'+fhour+'.png')


  # 35000feet: Wind speed > 60knots
  print(('Working on Wind speed > 60knots at 35000 feet  prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,wind35000ft_60,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Jet Stream > 60knots at 35000 feet   \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_jet35000.gt.60knt.t'+cyc+'z.'+fhour+'.png')

  # 35000feet: Wind speed > 80knots
  print(('Working on Wind speed > 80knots at 35000 feet  prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,wind35000ft_80,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Jet Stream > 80knots at 35000 feet   \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_jet35000.gt.80knt.t'+cyc+'z.'+fhour+'.png')

  # 35000feet: Wind speed > 100knots
  print(('Working on Wind speed > 100knots at 35000 feet  prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,wind35000ft_100,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Jet Stream > 100knots at 35000 feet   \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_jet35000.gt.100knt.t'+cyc+'z.'+fhour+'.png')



#############################################
  # Plot Convection/Reflectivity  Probability
############################################

  # Convection
  print(('Working convection  prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,convection,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Convection                          \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_cnv.t'+cyc+'z.'+fhour+'.png')

  #Reflectivity > 10
  print(('Working reflectivity > 10bdz  prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,reflect_10,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Reflectivity > 10dbZ                \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_reflectivity.gt.10dbz.t'+cyc+'z.'+fhour+'.png')

  #Reflectivity > 20
  print(('Working reflectivity > 20bdz  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,reflect_20,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Reflectivity > 20dbZ                \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_reflectivity.gt.20dbz.t'+cyc+'z.'+fhour+'.png')

  #Reflectivity > 30
  print(('Working reflectivity > 30bdz  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,reflect_30,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Reflectivity > 30dbZ                \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_reflectivity.gt.30dbz.t'+cyc+'z.'+fhour+'.png')

  #Reflectivity > 40
  print(('Working reflectivity > 40bdz  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,reflect_40,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Reflectivity > 40dbZ                \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_reflectivity.gt.40dbz.t'+cyc+'z.'+fhour+'.png')

  #Reflectivity > 50
  print(('Working reflectivity > 50bdz  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,reflect_50,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Reflectivity > 50dbZ                \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_reflectivity.gt.50dbz.t'+cyc+'z.'+fhour+'.png')


#############################################
  # Plot Precip Type  Probability
############################################

  # Rain type 
  print(('Working rain type  prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,type_rain,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Rain                                \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_rain.t'+cyc+'z.'+fhour+'.png')


  # Snow type
  print(('Working snow type  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,type_snow,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Snow                                \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_snow.t'+cyc+'z.'+fhour+'.png')

  # Freezing Rain type
  print(('Working freezing rain type  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,type_frzr,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Freezing Rain                        \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_frzr.t'+cyc+'z.'+fhour+'.png')


#############################################
  # Plot APCP   Probability
############################################

  if fhr >= 3:
   # APCP03h > 0.01
   print(('Working apcp03 > 0.01  prob for '+dom))

   for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,apcp3h_0p01,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of 3hr APCP > 0.01 inch                \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
   par = 1

   compress_and_save('./'+dom+'/prb_apcp3hr.gt.01.t'+cyc+'z.'+fhour+'.png')

   # APCP03h > 0.25
   print(('Working apcp03 > 0.25  prob for '+dom))

   for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,apcp3h_0p25,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of 3hr APCP > 0.25 inch                 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
   par = 1

   compress_and_save('./'+dom+'/prb_apcp3hr.gt.25.t'+cyc+'z.'+fhour+'.png')

   # APCP03h > 0.50
   print(('Working apcp03 > 0.50  prob for '+dom))

   for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,apcp3h_0p50,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of 3hr APCP > 0.50 inch                 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
   par = 1

   compress_and_save('./'+dom+'/prb_apcp3hr.gt.50.t'+cyc+'z.'+fhour+'.png')

  if fhr >= 6:

  # APCP06h > 0.01
   print(('Working apcp06 > 0.01  prob for '+dom))

   for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,apcp6h_0p01,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of 6hr APCP > 0.01 inch                 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
   par = 1

   compress_and_save('./'+dom+'/prb_apcp6hr.gt.01.t'+cyc+'z.'+fhour+'.png')

   # APCP06h > 0.25
   print(('Working apcp06 > 0.25  prob for '+dom))

   for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,apcp6h_0p25,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of 6hr APCP > 0.25 inch                \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
   par = 1

   compress_and_save('./'+dom+'/prb_apcp6hr.gt.25.t'+cyc+'z.'+fhour+'.png')

   # APCP06h > 0.50
   print(('Working apcp06 > 0.50  prob for '+dom))

   for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,apcp6h_0p50,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of 6hr APCP > 0.50 inch                   \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
   par = 1

   compress_and_save('./'+dom+'/prb_apcp6hr.gt.50.t'+cyc+'z.'+fhour+'.png')


#############################################
  # Plot Icing   Probability
############################################

  # Icicing at FL000
  print(('Working on Icing at FL000  prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,icing_FL000,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Icing at FL000                       \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_icing.at.FL000.t'+cyc+'z.'+fhour+'.png')


  # Icicing at FL030
  print(('Working on Icing at FL030  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,icing_FL030,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Icing at FL030                        \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_icing.at.FL030.t'+cyc+'z.'+fhour+'.png')

  # Icicing at FL060
  print(('Working on Icing at FL060  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,icing_FL060,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Icing at FL060                    \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_icing.at.FL060.t'+cyc+'z.'+fhour+'.png')

  # Icicing at FL090
  print(('Working on Icing at FL090  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,icing_FL090,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Icing at FL090                     \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_icing.at.FL090.t'+cyc+'z.'+fhour+'.png')

  # Icicing at FL120
  print(('Working on Icing at FL120  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,icing_FL120,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Icing at FL120                      \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_icing.at.FL120.t'+cyc+'z.'+fhour+'.png')

  # Icicing at FL150
  print(('Working on Icing at FL150  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,icing_FL150,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Icing at FL150                      \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_icing.at.FL150.t'+cyc+'z.'+fhour+'.png')

  # Icicing at FL180
  print(('Working on Icing at FL180  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,icing_FL180,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Icing at FL180                       \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_icing.at.FL180.t'+cyc+'z.'+fhour+'.png')

  # Icicing at FL240
  print(('Working on Icing at FL240  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,icing_FL240,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Icing at FL240                       \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_icing.at.FL240.t'+cyc+'z.'+fhour+'.png')


#############################################
  # Plot CAT   Probability
############################################

  # CAT_light at FL180
  print(('Working on CAT_light at FL180  prob for '+dom))

  for ax in axes:
    if par == 1:
      ax.text(0.5,1.03,'    ',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_light_FL180,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Light CAT at FL180                    \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_1cat8.FL180.t'+cyc+'z.'+fhour+'.png')

  # CAT_med at FL180
  print(('Working on CAT_med at FL180  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_med_FL180,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of moderate CAT at FL180 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_2cat8.FL180.t'+cyc+'z.'+fhour+'.png')

  # CAT_severe at FL180
  print(('Working on CAT_severe at FL180  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_severe_FL180,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Severe CAT at FL180 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_3cat8.FL180.t'+cyc+'z.'+fhour+'.png')

  # CAT_light at FL210
  print(('Working on CAT_light at FL210  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_light_FL210,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Light CAT at FL210 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_1cat8.FL210.t'+cyc+'z.'+fhour+'.png')

  # CAT_med at FL210
  print(('Working on CAT_med at FL210  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_med_FL210,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of moderate CAT at FL210 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_2cat8.FL210.t'+cyc+'z.'+fhour+'.png')

  # CAT_severe at FL210
  print(('Working on CAT_severe at FL210  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_severe_FL210,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Severe CAT at FL210 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_3cat8.FL210.t'+cyc+'z.'+fhour+'.png')


  # CAT_light at FL240
  print(('Working on CAT_light at FL240  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_light_FL240,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Light CAT at FL240 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_1cat8.FL240.t'+cyc+'z.'+fhour+'.png')

  # CAT_med at FL240
  print(('Working on CAT_med at FL240  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_med_FL240,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of moderate CAT at FL240 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_2cat8.FL240.t'+cyc+'z.'+fhour+'.png')

  # CAT_severe at FL240
  print(('Working on CAT_severe at FL240  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_severe_FL240,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Severe CAT at FL240 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_3cat8.FL240.t'+cyc+'z.'+fhour+'.png')



  # CAT_light at FL270
  print(('Working on CAT_light at FL270  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_light_FL270,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Light CAT at FL270 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_1cat8.FL270.t'+cyc+'z.'+fhour+'.png')

  # CAT_med at FL270
  print(('Working on CAT_med at FL270  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_med_FL270,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of moderate CAT at FL270 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_2cat8.FL270.t'+cyc+'z.'+fhour+'.png')

  # CAT_severe at FL270
  print(('Working on CAT_severe at FL270  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_severe_FL270,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Severe CAT at FL270 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_3cat8.FL270.t'+cyc+'z.'+fhour+'.png')


  # CAT_light at FL270
  print(('Working on CAT_light at FL270  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_light_FL270,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Light CAT at FL270 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_1cat8.FL270.t'+cyc+'z.'+fhour+'.png')

  # CAT_med at FL270
  print(('Working on CAT_med at FL270  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_med_FL270,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of moderate CAT at FL270 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_2cat8.FL270.t'+cyc+'z.'+fhour+'.png')

  # CAT_severe at FL270
  print(('Working on CAT_severe at FL270  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_severe_FL270,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Severe CAT at FL270 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_3cat8.FL270.t'+cyc+'z.'+fhour+'.png')


  # CAT_light at FL300
  print(('Working on CAT_light at FL300  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_light_FL300,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Light CAT at FL300 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_1cat8.FL300.t'+cyc+'z.'+fhour+'.png')

  # CAT_med at FL300
  print(('Working on CAT_med at FL300  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_med_FL300,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of moderate CAT at FL300 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_2cat8.FL300.t'+cyc+'z.'+fhour+'.png')

  # CAT_severe at FL300
  print(('Working on CAT_severe at FL300  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_severe_FL300,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Severe CAT at FL300 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_3cat8.FL300.t'+cyc+'z.'+fhour+'.png')


  # CAT_light at FL330
  print(('Working on CAT_light at FL330  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_light_FL330,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Light CAT at FL330 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_1cat8.FL330.t'+cyc+'z.'+fhour+'.png')

  # CAT_med at FL330
  print(('Working on CAT_med at FL330  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_med_FL330,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of moderate CAT at FL330 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_2cat8.FL330.t'+cyc+'z.'+fhour+'.png')

  # CAT_severe at FL330
  print(('Working on CAT_severe at FL330  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_severe_FL330,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Severe CAT at FL330 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_3cat8.FL330.t'+cyc+'z.'+fhour+'.png')


  # CAT_light at FL360
  print(('Working on CAT_light at FL360  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_light_FL360,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Light CAT at FL360 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_1cat8.FL360.t'+cyc+'z.'+fhour+'.png')

  # CAT_med at FL360
  print(('Working on CAT_med at FL360  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_med_FL360,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of moderate CAT at FL360 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_2cat8.FL360.t'+cyc+'z.'+fhour+'.png')

  # CAT_severe at FL360
  print(('Working on CAT_severe at FL360  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_severe_FL360,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Severe CAT at FL360 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_3cat8.FL360.t'+cyc+'z.'+fhour+'.png')


  # CAT_light at FL390
  print(('Working on CAT_light at FL390  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_light_FL390,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Light CAT at FL390 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_1cat8.FL390.t'+cyc+'z.'+fhour+'.png')

  # CAT_med at FL390
  print(('Working on CAT_med at FL390  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_med_FL390,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of moderate CAT at FL390 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_2cat8.FL390.t'+cyc+'z.'+fhour+'.png')

  # CAT_severe at FL390
  print(('Working on CAT_severe at FL390  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_severe_FL390,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Severe CAT at FL390 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_3cat8.FL390.t'+cyc+'z.'+fhour+'.png')


  # CAT_light at FL420
  print(('Working on CAT_light at FL420  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_light_FL420,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Light CAT at FL420 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_1cat8.FL420.t'+cyc+'z.'+fhour+'.png')

  # CAT_med at FL420
  print(('Working on CAT_med at FL420  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_med_FL420,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of moderate CAT at FL420 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_2cat8.FL420.t'+cyc+'z.'+fhour+'.png')

  # CAT_severe at FL420
  print(('Working on CAT_severe at FL420  prob for '+dom))

  for ax in axes:
    if par == 1:
      cs_1 = m.pcolormesh(x_shift,y_shift,cat_severe_FL420,cmap=cm,norm=norm,ax=ax)
      ax.text(.5,1.03,'NARRE Probability of Severe CAT at FL420 \n initialized: '+itime+' valid: '+vtime + ' (f'+fhour+')',horizontalalignment='center',fontsize=8,transform=ax.transAxes,bbox=dict(facecolor='white',alpha=0.85,boxstyle='square,pad=0.2'))
    par += 1
  par = 1

  compress_and_save('./'+dom+'/prb_3cat8.FL420.t'+cyc+'z.'+fhour+'.png')

#####################################
  plt.clf()
#####################################


main()

